[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Josiah Parry. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Parry J (2024). arcgisgeocode: Robust Interface ArcGIS 'Geocoding Services'. R package version 0.2.2, https://r.esri.com/arcgisgeocode/, https://github.com/r-arcgis/arcgisgeocode.","code":"@Manual{,   title = {arcgisgeocode: A Robust Interface to ArcGIS 'Geocoding Services'},   author = {Josiah Parry},   year = {2024},   note = {R package version 0.2.2,     https://r.esri.com/arcgisgeocode/},   url = {https://github.com/r-arcgis/arcgisgeocode}, }"},{"path":"/index.html","id":"arcgisgeocode","dir":"","previous_headings":"","what":"A Robust Interface to ArcGIS Geocoding Services","title":"A Robust Interface to ArcGIS Geocoding Services","text":"arcgisgeocode provides access ArcGIS geocoding services R. supports address candidate identification, batch geocoding, reverse geocoding, autocomplete suggestions.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Robust Interface to ArcGIS Geocoding Services","text":"Install package CRAN can also install development version r-universe binary Mac, Windows, Ubuntu r-universe like : can install package source requires Rust available. Follow rustup instructions install Rust verify installation compatible using rextendr::rust_sitrep(). install development version GitHub:","code":"# install from CRAN  install.packages(\"arcgisgeocode\") # install from R-universe install.packages(\"arcgisgeocode\", repos = \"https://r-arcgis.r-universe.dev\") # install pak if not available if (!requireNamespace(\"pak\")) install.packages(\"pak\")  # install development version of {arcgisgeocode} pak::pak(\"r-arcgis/arcgisgeocode\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"A Robust Interface to ArcGIS Geocoding Services","text":"default, ArcGIS World Geocoder used. geocoding server provides public access /findAddressCandidates, /reverseGeocode, /suggest endpoints made available via find_address_candidates(), reverse_geocode(), suggest_places() functions respectively. batch geocoding endpoint /geocodeAddresses available via geocode_addresses(). However, requires use authorization token may consume credits. Refer ArcGIS World Geocoder official documentation additional information use restrictions licensing. example, valid token required store results geocoding transactions.","code":""},{"path":"/index.html","id":"reverse-geocoding","dir":"","previous_headings":"Usage","what":"Reverse geocoding","title":"A Robust Interface to ArcGIS Geocoding Services","text":"Reverse geocoding takes location finds associated address. [!TIP] token required use function.","code":"library(arcgisgeocode)  # Find addresses from locations rev_res <- reverse_geocode(c(-117.172, 34.052))  # preview results dplyr::glimpse(rev_res) #> Rows: 1 #> Columns: 23 #> $ match_addr   <chr> \"600-620 Home Pl, Redlands, California, 92374\" #> $ long_label   <chr> \"600-620 Home Pl, Redlands, CA, 92374, USA\" #> $ short_label  <chr> \"600-620 Home Pl\" #> $ addr_type    <chr> \"StreetAddress\" #> $ type_field   <chr> \"\" #> $ place_name   <chr> \"\" #> $ add_num      <chr> \"608\" #> $ address      <chr> \"608 Home Pl\" #> $ block        <chr> \"\" #> $ sector       <chr> \"\" #> $ neighborhood <chr> \"South Redlands\" #> $ district     <chr> \"\" #> $ city         <chr> \"Redlands\" #> $ metro_area   <chr> \"\" #> $ subregion    <chr> \"San Bernardino County\" #> $ region       <chr> \"California\" #> $ region_abbr  <chr> \"CA\" #> $ territory    <chr> \"\" #> $ postal       <chr> \"92374\" #> $ postal_ext   <chr> \"\" #> $ country_name <chr> \"United States\" #> $ country_code <chr> \"USA\" #> $ geometry     <POINT [°]> POINT (-117.172 34.05204)"},{"path":"/index.html","id":"address-search","dir":"","previous_headings":"Usage","what":"Address search","title":"A Robust Interface to ArcGIS Geocoding Services","text":"find_address_candidates() function returns geocoding candidate results. function vectorized input perform multiple requests parallel. request geocodes one location time. One candidates returned endpoint. can limit number candidates using max_locations argument (maximum 50). [!TIP] token required use function.","code":"# Find addresses from address search candidates <- find_address_candidates(   address = \"esri\",   address2 = \"380 new york street\",   city = \"redlands\",   country_code = \"usa\",   max_locations = 2 )  dplyr::glimpse(candidates[, 1:10]) #> Rows: 2 #> Columns: 11 #> $ input_id    <int> 1, 1 #> $ result_id   <int> NA, NA #> $ loc_name    <chr> \"World\", \"World\" #> $ status      <chr> \"M\", \"M\" #> $ score       <dbl> 100.00, 98.57 #> $ match_addr  <chr> \"Esri\", \"380 New York St, Redlands, California, 92373\" #> $ long_label  <chr> \"Esri, 380 New York St, Redlands, CA, 92373, USA\", \"380 Ne… #> $ short_label <chr> \"Esri\", \"380 New York St\" #> $ addr_type   <chr> \"POI\", \"PointAddress\" #> $ type_field  <chr> \"Business Facility\", NA #> $ geometry    <POINT [°]> POINT (-117.1957 34.05609), POINT (-117.1948 34.05726)…"},{"path":"/index.html","id":"suggest-locations","dir":"","previous_headings":"Usage","what":"Suggest locations","title":"A Robust Interface to ArcGIS Geocoding Services","text":"Geocoding services can also provide location suggestion based search term , optionally, location extent. suggest_places() function (/suggest endpoint) intended used part client-facing application provides autocomplete suggestions. example create search extent around single point find suggestions based search term \"bellwood\". [!TIP] token required use function. result intended provided find_address_candidates() complete geocoding process. column text contains address geocode. column magic_key special identifier makes much faster fetch results. Pass argument magic_key.","code":"# identify a search point as a simple feature column location <- sf::st_sfc(   sf::st_point(c(-84.34, 33.74)),   crs = 4326 )  # buffer and create a bbox object to search within the extent search_extent <- sf::st_bbox(   sf::st_buffer(location, 10) )  # find suggestions within the bounding box suggestions <- suggest_places(   \"bellwood\",   location,   search_extent = search_extent )  suggestions #> # A data frame: 5 × 3 #>   text                                                   magic_key is_collection #> * <chr>                                                  <chr>     <lgl>         #> 1 Bellwood Coffee, 1366 Glenwood Ave SE, Atlanta, GA, 3… dHA9MCN0… FALSE         #> 2 Bellwood, Atlanta, GA, USA                             dHA9MCN0… FALSE         #> 3 Bellwood Church, Atlanta, GA, USA                      dHA9MCN0… FALSE         #> 4 Bellwood Yard, Atlanta, GA, USA                        dHA9MCN0… FALSE         #> 5 Bellwood, IL, USA                                      dHA9NCN0… FALSE # get address candidate information # using the text and the magic key res <- find_address_candidates(   suggestions$text,   magic_key = suggestions$magic_key )  dplyr::glimpse(res[, 1:10]) #> Rows: 7 #> Columns: 11 #> $ input_id    <int> 1, 2, 3, 4, 5, 5, 5 #> $ result_id   <int> NA, NA, NA, NA, NA, NA, NA #> $ loc_name    <chr> NA, NA, NA, NA, NA, NA, NA #> $ status      <chr> \"M\", \"M\", \"M\", \"M\", \"T\", \"T\", \"T\" #> $ score       <dbl> 100, 100, 100, 100, 100, 100, 100 #> $ match_addr  <chr> \"Bellwood Coffee\", \"Bellwood, Atlanta, Georgia\", \"Bellwood… #> $ long_label  <chr> \"Bellwood Coffee, 1366 Glenwood Ave SE, Atlanta, GA, 30316… #> $ short_label <chr> \"Bellwood Coffee\", \"Bellwood\", \"Bellwood Church\", \"Bellwoo… #> $ addr_type   <chr> \"POI\", \"Locality\", \"POI\", \"POI\", \"Locality\", \"Locality\", \"… #> $ type_field  <chr> \"Snacks\", \"City\", \"Church\", \"Building\", \"City\", \"City\", \"C… #> $ geometry    <POINT [°]> POINT (-84.34273 33.74034), POINT (-84.41243 33.77455), PO…"},{"path":"/index.html","id":"important-storing-results","dir":"","previous_headings":"","what":"Important: Storing results","title":"A Robust Interface to ArcGIS Geocoding Services","text":"default, argument for_storage = FALSE meaning results geocoding operation persisted. intend persist results geocoding operation, must set for_storage = TRUE. learn free paid geocoding operations refer storage parameter documentation.","code":""},{"path":"/index.html","id":"batch-geocoding","dir":"","previous_headings":"","what":"Batch geocoding","title":"A Robust Interface to ArcGIS Geocoding Services","text":"Many addresses can geocoded quickly using geocode_addresses() function calls /geocodeAddresses endpoint. Note function requires authorization token. geocode_addresses() sends input addresses chunks parallel requests. Batch geocoding requires signed user. Load {arcgisutils} authorize set token. example uses Geocoding Test Dataset Urban Institute. [!TIP] token required use function World Geocoding Service. may necessary using private ArcGIS Enterprise service.","code":"library(arcgisutils) library(arcgisgeocode)  set_arc_token(auth_user())  # Example dataset from the Urban Institute fp <- \"https://urban-data-catalog.s3.amazonaws.com/drupal-root-live/2020/02/25/geocoding_test_data.csv\"  to_geocode <- readr::read_csv(fp, readr::locale(encoding = \"latin1\"))  geocoded <- to_geocode |>   dplyr::reframe(     geocode_addresses(       address = address,       city = city,       region = state,       postal = zip     )   )  dplyr::glimpse(res[, 1:10])"},{"path":"/index.html","id":"using-other-locators","dir":"","previous_headings":"","what":"Using other locators","title":"A Robust Interface to ArcGIS Geocoding Services","text":"arcgisgeocode can used geocoding services, including custom locators hosted ArcGIS Online Enterprise. example, can use AddressNC geocoding service available ArcGIS Online. Create new GeocodeServer object using geocode_server(). geocoder can passed geocoder argument geocoding functions.","code":"address_nc <- geocode_server(   \"https://services.nconemap.gov/secure/rest/services/AddressNC/AddressNC_geocoder/GeocodeServer\",   token = NULL )  res <- find_address_candidates(   address = \"rowan coffee\",   city = \"asheville\",   geocoder = address_nc )  dplyr::glimpse(res[, 1:10]) #> Rows: 2 #> Columns: 11 #> $ input_id    <int> 1, 1 #> $ result_id   <int> NA, NA #> $ loc_name    <chr> NA, NA #> $ status      <chr> \"T\", \"T\" #> $ score       <dbl> 78, 78 #> $ match_addr  <chr> \"ASHEVILLE\", \"ASHEVILLE\" #> $ long_label  <chr> \"ASHEVILLE\", \"ASHEVILLE\" #> $ short_label <chr> \"ASHEVILLE\", \"ASHEVILLE\" #> $ addr_type   <chr> \"Locality\", \"Locality\" #> $ type_field  <chr> \"City\", \"City\" #> $ geometry    <POINT [US_survey_foot]> POINT (943428.1 681596.4), POINT (948500.3 631973.4)…"},{"path":"/reference/arcgisgeocode-package.html","id":null,"dir":"Reference","previous_headings":"","what":"arcgisgeocode: A Robust Interface to ArcGIS 'Geocoding Services' — arcgisgeocode-package","title":"arcgisgeocode: A Robust Interface to ArcGIS 'Geocoding Services' — arcgisgeocode-package","text":"fast robust interface ArcGIS 'Geocoding Services'. Provides capabilities reverse geocoding, finding address candidates, character--character search autosuggestion, batch geocoding. public 'ArcGIS World Geocoder' accessible free use via 'arcgisgeocode' services except batch geocoding. 'arcgisgeocode' also integrates 'arcgisutils' provide access custom locators private 'ArcGIS World Geocoder' hosted 'ArcGIS Enterprise'. Learn 'Geocode service' API reference https://developers.arcgis.com/rest/geocode/api-reference/overview-world-geocoding-service.htm. fast robust interface ArcGIS 'Geocoding Services'. Provides capabilities reverse geocoding, finding address candidates, character--character search autosuggestion, batch geocoding. public 'ArcGIS World Geocoder' accessible free use via 'arcgisgeocode' services except batch geocoding. 'arcgisgeocode' also integrates 'arcgisutils' provide access custom locators private 'ArcGIS World Geocoder' hosted 'ArcGIS Enterprise'. Learn 'Geocode service' API reference https://developers.arcgis.com/rest/geocode/api-reference/overview-world-geocoding-service.htm.","code":""},{"path":[]},{"path":"/reference/arcgisgeocode-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"arcgisgeocode: A Robust Interface to ArcGIS 'Geocoding Services' — arcgisgeocode-package","text":"Maintainer: Josiah Parry josiah.parry@gmail.com (ORCID)","code":""},{"path":"/reference/esri_wkids.html","id":null,"dir":"Reference","previous_headings":"","what":"Esri well-known IDs — esri_wkids","title":"Esri well-known IDs — esri_wkids","text":"integer vector containing WKIDs Esri authority spatial references. Esri WKIDs identified {arcgeocoder} package @dieghernan.","code":""},{"path":"/reference/esri_wkids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Esri well-known IDs — esri_wkids","text":"","code":"esri_wkids"},{"path":"/reference/esri_wkids.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Esri well-known IDs — esri_wkids","text":"object class integer length 2886.","code":""},{"path":"/reference/esri_wkids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Esri well-known IDs — esri_wkids","text":"numeric vector well-known IDs","code":""},{"path":"/reference/find_address_candidates.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Address Candidates — find_address_candidates","title":"Find Address Candidates — find_address_candidates","text":"Given address, returns geocode result candidates.","code":""},{"path":"/reference/find_address_candidates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Address Candidates — find_address_candidates","text":"","code":"find_address_candidates(   single_line = NULL,   address = NULL,   address2 = NULL,   address3 = NULL,   neighborhood = NULL,   city = NULL,   subregion = NULL,   region = NULL,   postal = NULL,   postal_ext = NULL,   country_code = NULL,   search_extent = NULL,   location = NULL,   category = NULL,   crs = NULL,   max_locations = NULL,   for_storage = FALSE,   match_out_of_range = NULL,   location_type = NULL,   lang_code = NULL,   source_country = NULL,   preferred_label_values = NULL,   magic_key = NULL,   geocoder = default_geocoder(),   token = arc_token(),   .progress = TRUE )"},{"path":"/reference/find_address_candidates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Address Candidates — find_address_candidates","text":"single_line character vector addresses geocode. provided address fields used. address provided, single_line must . address character vector first part street address. Typically used street name house number. can also place building name. single_line provided, address must . address2 character vector second part street address. Typically includes house number, sub-unit, street, building, place name. Optional. address3 character vector third part address. Optional. neighborhood character vector smallest administrative division associated address. Typically, neighborhood section larger populated place. Optional. city character vector next largest administrative division associated address, typically, city municipality. city subdivision subregion region. Optional. subregion character vector next largest administrative division associated address. Depending country, subregion can represent county, state, province. Optional. region character vector largest administrative division associated address, typically, state province. Optional. postal character vector standard postal code address, typically, three– six-digit alphanumeric code. Optional. postal_ext character vector postal code extension, United States Postal Service ZIP+4 code, provides finer resolution higher accuracy also passing postal. Optional. country_code default NULL. ISO 3166 country code. See iso_3166_codes() valid ISO codes. Optional. search_extent object class bbox limits search area. especially useful applications user search places addresses within current map extent. Optional. location sfc_POINT object centers search. Optional. category scalar character. Place address type can used filter suggest results. Optional. crs CRS returned geometries. Passed sf::st_crs(). Ignored locations sfc_POINT object. max_locations maximum number results return. default 15 maximum 50. Optional. for_storage default FALSE. Whether results saved long term storage. match_out_of_range set TRUE service default. Matches locations Optional. location_type default \"rooftop\". Must one \"rooftop\" \"street\". Optional. lang_code default NULL. ISO 3166 country code. See iso_3166_codes() valid ISO codes. Optional. source_country default NULL. ISO 3166 country code. See iso_3166_codes() valid ISO codes. Optional. preferred_label_values default NULL. Must one \"postalCity\" \"localCity\". Optional. magic_key unique identifier returned suggest_places(). magic_key provided, results returned faster. Optional. geocoder default default_geocoder(). token object class httr2_token generated auth_code() related function .progress default TRUE. Whether progress bar provided.","code":""},{"path":"/reference/find_address_candidates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Address Candidates — find_address_candidates","text":"sf object 60 columns.","code":""},{"path":"/reference/find_address_candidates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Address Candidates — find_address_candidates","text":"Utilizes /findAddressCandidates endpoint. endpoint can handle one request time. make operation performant possible, requests sent parallel using httr2::req_perform_parallel(). JSON responses processed using Rust returned sf object.","code":""},{"path":"/reference/find_address_candidates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Address Candidates — find_address_candidates","text":"","code":"candidates_from_single <- find_address_candidates(   single_line = \"Bellwood Coffee, 1366 Glenwood Ave SE, Atlanta, GA, 30316, USA\" )  candidates_from_parts <- find_address_candidates(   address = c(\"Bellwood Coffee\", \"Joe's coffeehouse\"),   address2 = c(\"1366 Glenwood Ave SE\", \"510 Flat Shoals Ave\"),   city = \"Atlanta\",   region = \"GA\",   postal = \"30316\",   country_code = \"USA\" )  str(candidates_from_parts) #> Classes ‘sf’ and 'data.frame':\t3 obs. of  62 variables: #>  $ input_id    : int  1 1 2 #>  $ result_id   : int  NA NA NA #>  $ loc_name    : chr  \"World\" \"World\" \"World\" #>  $ status      : chr  \"M\" \"M\" \"M\" #>  $ score       : num  100 96.9 96.2 #>  $ match_addr  : chr  \"Bellwood Coffee\" \"1366 Glenwood Ave SE, Atlanta, Georgia, 30316\" \"510 Flat Shoals Ave SE, Atlanta, Georgia, 30316\" #>  $ long_label  : chr  \"Bellwood Coffee, 1366 Glenwood Ave SE, Atlanta, GA, 30316, USA\" \"1366 Glenwood Ave SE, Atlanta, GA, 30316, USA\" \"510 Flat Shoals Ave SE, Atlanta, GA, 30316, USA\" #>  $ short_label : chr  \"Bellwood Coffee\" \"1366 Glenwood Ave SE\" \"510 Flat Shoals Ave SE\" #>  $ addr_type   : chr  \"POI\" \"StreetAddress\" \"PointAddress\" #>  $ type_field  : chr  \"Snacks\" NA NA #>  $ place_name  : chr  \"Bellwood Coffee\" NA NA #>  $ place_addr  : chr  \"1366 Glenwood Ave SE, Atlanta, Georgia, 30316\" \"1366 Glenwood Ave SE, Atlanta, Georgia, 30316\" \"510 Flat Shoals Ave SE, Atlanta, Georgia, 30316\" #>  $ phone       : chr  NA NA NA #>  $ url         : chr  NA NA NA #>  $ rank        : num  19 20 20 #>  $ add_bldg    : chr  NA NA NA #>  $ add_num     : chr  \"1366\" \"1366\" \"510\" #>  $ add_num_from: chr  NA \"1360\" NA #>  $ add_num_to  : chr  NA \"1368\" NA #>  $ add_range   : chr  NA \"1360-1368\" NA #>  $ side        : chr  NA \"L\" NA #>  $ st_pre_dir  : chr  NA NA NA #>  $ st_pre_type : chr  NA NA NA #>  $ st_name     : chr  \"Glenwood\" \"Glenwood\" \"Flat Shoals\" #>  $ st_type     : chr  \"Ave\" \"Ave\" \"Ave\" #>  $ st_dir      : chr  \"SE\" \"SE\" \"SE\" #>  $ bldg_type   : chr  NA NA NA #>  $ bldg_name   : chr  NA NA NA #>  $ level_type  : chr  NA NA NA #>  $ level_name  : chr  NA NA NA #>  $ unit_type   : chr  NA NA NA #>  $ unit_name   : chr  NA NA NA #>  $ sub_addr    : chr  NA NA NA #>  $ st_addr     : chr  \"1366 Glenwood Ave SE\" \"1366 Glenwood Ave SE\" \"510 Flat Shoals Ave SE\" #>  $ block       : chr  NA NA NA #>  $ sector      : chr  NA NA NA #>  $ nbrhd       : chr  NA NA NA #>  $ district    : chr  NA NA NA #>  $ city        : chr  \"Atlanta\" \"Atlanta\" \"Atlanta\" #>  $ metro_area  : chr  NA NA NA #>  $ subregion   : chr  \"DeKalb County\" \"DeKalb County\" \"DeKalb County\" #>  $ region      : chr  \"Georgia\" \"Georgia\" \"Georgia\" #>  $ region_abbr : chr  \"GA\" \"GA\" \"GA\" #>  $ territory   : chr  NA NA NA #>  $ zone        : chr  NA NA NA #>  $ postal      : chr  \"30316\" \"30316\" \"30316\" #>  $ postal_ext  : chr  NA \"2051\" \"2044\" #>  $ country     : chr  \"USA\" \"USA\" \"USA\" #>  $ cntry_name  : chr  \"United States\" \"United States\" \"United States\" #>  $ lang_code   : chr  \"ENG\" \"ENG\" \"ENG\" #>  $ distance    : num  0 0 0 #>  $ x           : num  -84.3 -84.3 -84.3 #>  $ y           : num  33.7 33.7 33.7 #>  $ display_x   : num  -84.3 -84.3 -84.3 #>  $ display_y   : num  33.7 33.7 33.7 #>  $ xmin        : num  -84.3 -84.3 -84.3 #>  $ xmax        : num  -84.3 -84.3 -84.3 #>  $ ymin        : num  33.7 33.7 33.7 #>  $ ymax        : num  33.7 33.7 33.7 #>  $ ex_info     : chr  NA \"BELLWOOD COFFEE\" \"JOE S COFFEEHOUSE\" #>  $ extents     :List of 3 #>   ..$ : Named num  -84.3 33.7 -84.3 33.7 #>   .. ..- attr(*, \"names\")= chr [1:4] \"xmin\" \"ymin\" \"xmax\" \"ymax\" #>   ..$ : Named num  -84.3 33.7 -84.3 33.7 #>   .. ..- attr(*, \"names\")= chr [1:4] \"xmin\" \"ymin\" \"xmax\" \"ymax\" #>   ..$ : Named num  -84.3 33.7 -84.3 33.7 #>   .. ..- attr(*, \"names\")= chr [1:4] \"xmin\" \"ymin\" \"xmax\" \"ymax\" #>  $ geometry    :sfc_POINT of length 3; first list element:  'XY' num  -84.3 33.7 #>  - attr(*, \"sf_column\")= chr \"geometry\" #>  - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ... #>   ..- attr(*, \"names\")= chr [1:61] \"input_id\" \"result_id\" \"loc_name\" \"status\" ... #>  - attr(*, \"error_requests\")= list()"},{"path":"/reference/geocode_addresses.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch Geocode Addresses — geocode_addresses","title":"Batch Geocode Addresses — geocode_addresses","text":"Gecocode vector addresses batches.","code":""},{"path":"/reference/geocode_addresses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch Geocode Addresses — geocode_addresses","text":"","code":"geocode_addresses(   single_line = NULL,   address = NULL,   address2 = NULL,   address3 = NULL,   neighborhood = NULL,   city = NULL,   subregion = NULL,   region = NULL,   postal = NULL,   postal_ext = NULL,   country_code = NULL,   location = NULL,   search_extent = NULL,   category = NULL,   crs = NULL,   max_locations = NULL,   for_storage = FALSE,   match_out_of_range = NULL,   location_type = NULL,   lang_code = NULL,   source_country = NULL,   preferred_label_values = NULL,   batch_size = NULL,   geocoder = default_geocoder(),   token = arc_token(),   .progress = TRUE )"},{"path":"/reference/geocode_addresses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch Geocode Addresses — geocode_addresses","text":"single_line character vector addresses geocode. provided address fields used. address provided, single_line must . address character vector first part street address. Typically used street name house number. can also place building name. single_line provided, address must . address2 character vector second part street address. Typically includes house number, sub-unit, street, building, place name. Optional. address3 character vector third part address. Optional. neighborhood character vector smallest administrative division associated address. Typically, neighborhood section larger populated place. Optional. city character vector next largest administrative division associated address, typically, city municipality. city subdivision subregion region. Optional. subregion character vector next largest administrative division associated address. Depending country, subregion can represent county, state, province. Optional. region character vector largest administrative division associated address, typically, state province. Optional. postal character vector standard postal code address, typically, three– six-digit alphanumeric code. Optional. postal_ext character vector postal code extension, United States Postal Service ZIP+4 code, provides finer resolution higher accuracy also passing postal. Optional. country_code default NULL. ISO 3166 country code. See iso_3166_codes() valid ISO codes. Optional. location sfc_POINT object centers search. Optional. search_extent object class bbox limits search area. especially useful applications user search places addresses within current map extent. Optional. category scalar character. Place address type can used filter suggest results. Optional. crs CRS returned geometries. Passed sf::st_crs(). Ignored locations sfc_POINT object. max_locations maximum number results return. default 15 maximum 50. Optional. for_storage default FALSE. Whether results saved long term storage. match_out_of_range set TRUE service default. Matches locations Optional. location_type default \"rooftop\". Must one \"rooftop\" \"street\". Optional. lang_code default NULL. ISO 3166 country code. See iso_3166_codes() valid ISO codes. Optional. source_country default NULL. ISO 3166 country code. See iso_3166_codes() valid ISO codes. Optional. preferred_label_values default NULL. Must one \"postalCity\" \"localCity\". Optional. batch_size number addresses geocode per request. Uses suggested batch size property geocoder. geocoder default default_geocoder(). token object class httr2_token generated auth_code() related function .progress default TRUE. Whether progress bar provided.","code":""},{"path":"/reference/geocode_addresses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch Geocode Addresses — geocode_addresses","text":"sf object","code":""},{"path":"/reference/geocode_addresses.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Batch Geocode Addresses — geocode_addresses","text":"Addresses partitioned batches batch_size elements. batches sent geocoding service parallel using httr2::req_perform_parallel(). JSON responses processed using Rust returned sf object. Utilizes /geocodeAddresses endpoint.","code":""},{"path":"/reference/geocode_addresses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch Geocode Addresses — geocode_addresses","text":"","code":"# Example dataset from the Urban Institute if (FALSE) { # \\dontrun{ fp <- paste0(   \"https://urban-data-catalog.s3.amazonaws.com/\",   \"drupal-root-live/2020/02/25/geocoding_test_data.csv\" ) to_geocode <- read.csv(fp) geocode_addresses(   address = to_geocode$address,   city = to_geocode$city,   region = to_geocode$state,   postal = to_geocode$zip ) } # }"},{"path":"/reference/geocode_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GeocodeServer — geocode_server","title":"Create a GeocodeServer — geocode_server","text":"Create object class GeocodeServer URL. object stores service definition geocoding service list object.","code":""},{"path":"/reference/geocode_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GeocodeServer — geocode_server","text":"","code":"geocode_server(url, token = arc_token())"},{"path":"/reference/geocode_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a GeocodeServer — geocode_server","text":"url URL geocoding server. token object class httr2_token generated auth_code() related function","code":""},{"path":"/reference/geocode_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GeocodeServer — geocode_server","text":"object class GeocodeServer.","code":""},{"path":"/reference/geocode_server.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a GeocodeServer — geocode_server","text":"","code":"server_url <- \"https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer\" geocode_server(server_url) #> <GeocodeServer> #> Description: World Geocoder #> Version: 11.3 #> CRS: 4326"},{"path":"/reference/iso_3166_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"ISO 3166 Country Codes — iso_3166_codes","title":"ISO 3166 Country Codes — iso_3166_codes","text":"Create data.frame ISO 3166 2 3 digit Country codes.","code":""},{"path":"/reference/iso_3166_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ISO 3166 Country Codes — iso_3166_codes","text":"","code":"iso_3166_codes()"},{"path":"/reference/iso_3166_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ISO 3166 Country Codes — iso_3166_codes","text":"data.frame columns country, code_2, code_3.","code":""},{"path":"/reference/iso_3166_codes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ISO 3166 Country Codes — iso_3166_codes","text":"Country codes provided rust_iso3166.","code":""},{"path":"/reference/iso_3166_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ISO 3166 Country Codes — iso_3166_codes","text":"","code":"head(iso_3166_codes()) #> # A data frame: 6 × 3 #>   country        code_2 code_3 #> * <chr>          <chr>  <chr>  #> 1 Afghanistan    AF     AFG    #> 2 Åland Islands  AX     ALA    #> 3 Albania        AL     ALB    #> 4 Algeria        DZ     DZA    #> 5 American Samoa AS     ASM    #> 6 Andorra        AD     AND"},{"path":"/reference/list_geocoders.html","id":null,"dir":"Reference","previous_headings":"","what":"List Available Geocoder Services — list_geocoders","title":"List Available Geocoder Services — list_geocoders","text":"Evaluates logged user authorization token returns data.frame containing available geocoding services associated token. users signed private portal ArcGIS Online, public ArcGIS World Geocoder used. Otherwise, first available geocoding service associated authorization token used.","code":""},{"path":"/reference/list_geocoders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Available Geocoder Services — list_geocoders","text":"","code":"list_geocoders(token = arc_token())  default_geocoder(token = arc_token())"},{"path":"/reference/list_geocoders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Available Geocoder Services — list_geocoders","text":"token object class httr2_token generated auth_code() related function","code":""},{"path":"/reference/list_geocoders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Available Geocoder Services — list_geocoders","text":"data.frame columns url, northLat, southLat, eastLon, westLon, name, suggest, zoomScale, placefinding, batch.","code":""},{"path":"/reference/list_geocoders.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List Available Geocoder Services — list_geocoders","text":"default_geocoder() return ArcGIS World Geocoder token available. list_geocoder() requires authorization token. manually create GeocodeServer object, see geocode_server().","code":""},{"path":"/reference/list_geocoders.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Available Geocoder Services — list_geocoders","text":"","code":"# Default geocoder object # ArcGIS World Geocoder b/c no token default_geocoder() #> <GeocodeServer> #> Description: World Geocoder #> Version: 11.1 #> CRS: 4326  # Requires an Authorization Token if (FALSE) { # \\dontrun{ list_geocoders() } # }"},{"path":"/reference/reverse_geocode.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse Geocode Locations — reverse_geocode","title":"Reverse Geocode Locations — reverse_geocode","text":"Determines address given point.","code":""},{"path":"/reference/reverse_geocode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse Geocode Locations — reverse_geocode","text":"","code":"reverse_geocode(   locations,   crs = sf::st_crs(locations),   ...,   lang_code = NULL,   feature_type = NULL,   location_type = c(\"rooftop\", \"street\"),   preferred_label_values = c(\"postalCity\", \"localCity\"),   for_storage = FALSE,   geocoder = default_geocoder(),   token = arc_token(),   .progress = TRUE )"},{"path":"/reference/reverse_geocode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse Geocode Locations — reverse_geocode","text":"locations sfc_POINT object locations reverse geocoded. crs CRS returned geometries. Passed sf::st_crs(). Ignored locations sfc_POINT object. ... unused. lang_code default NULL. ISO 3166 country code. See iso_3166_codes() valid ISO codes. Optional. feature_type limits possible match types returned. Must one \"StreetInt\", \"DistanceMarker\", \"StreetAddress\", \"StreetName\", \"POI\", \"Subaddress\", \"PointAddress\", \"Postal\", \"Locality\". Optional. location_type default \"rooftop\". Must one \"rooftop\" \"street\". Optional. preferred_label_values default NULL. Must one \"postalCity\" \"localCity\". Optional. for_storage default FALSE. Whether results saved long term storage. geocoder default default_geocoder(). token object class httr2_token generated auth_code() related function .progress default TRUE. Whether progress bar provided.","code":""},{"path":"/reference/reverse_geocode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse Geocode Locations — reverse_geocode","text":"sf object.","code":""},{"path":"/reference/reverse_geocode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reverse Geocode Locations — reverse_geocode","text":"function utilizes /reverseGeocode endpoint geocoding service. default, uses public ArcGIS World Geocoder. Intersection matches returned feature_types = \"StreetInt\". See REST documentation .","code":""},{"path":"/reference/reverse_geocode.html","id":"location-type","dir":"Reference","previous_headings":"","what":"Location Type","title":"Reverse Geocode Locations — reverse_geocode","text":"Specifies whether output geometry shuold rooftop point street entrance location. location_type parameter changes geometry's placement change attribute values X, Y, DisplayX, DisplayY.","code":""},{"path":"/reference/reverse_geocode.html","id":"storage","dir":"Reference","previous_headings":"","what":"Storage","title":"Reverse Geocode Locations — reverse_geocode","text":"Important argument for_storage used determine request allows persist results query. important note contractual obligations appropriately set argument. save persist results for_storage = FALSE (default).","code":""},{"path":"/reference/reverse_geocode.html","id":"execution","dir":"Reference","previous_headings":"","what":"Execution","title":"Reverse Geocode Locations — reverse_geocode","text":"/reverseGeocode endpoint can handle one address time. make operation performant possible, requests sent parallel using httr2::req_perform_parallel(). JSON responses processed using Rust returned sf object.","code":""},{"path":"/reference/reverse_geocode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse Geocode Locations — reverse_geocode","text":"","code":"# Find addresses from locations reverse_geocode(c(-117.172, 34.052)) #> Registered S3 method overwritten by 'jsonify': #>   method     from     #>   print.json jsonlite #> Simple feature collection with 1 feature and 22 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -117.172 ymin: 34.05204 xmax: -117.172 ymax: 34.05204 #> Geodetic CRS:  WGS 84 #> # A data frame: 1 × 23 #>   match_addr      long_label short_label addr_type type_field place_name add_num #> * <chr>           <chr>      <chr>       <chr>     <chr>      <chr>      <chr>   #> 1 600-620 Home P… 600-620 H… 600-620 Ho… StreetAd… \"\"         \"\"         608     #> # ℹ 16 more variables: address <chr>, block <chr>, sector <chr>, #> #   neighborhood <chr>, district <chr>, city <chr>, metro_area <chr>, #> #   subregion <chr>, region <chr>, region_abbr <chr>, territory <chr>, #> #   postal <chr>, postal_ext <chr>, country_name <chr>, country_code <chr>, #> #   geometry <POINT [°]>"},{"path":"/reference/storage.html","id":null,"dir":"Reference","previous_headings":"","what":"Storing Geocoding Results — storage","title":"Storing Geocoding Results — storage","text":"results geocoding operations stored persisted unless for_storage argument set TRUE. default argument value for_storage = FALSE, indicates results operation stored, can temporarily displayed map, instance. store results, database, example, need set parameter true.","code":""},{"path":"/reference/storage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Storing Geocoding Results — storage","text":"See official documentation context.","code":""},{"path":"/reference/suggest_places.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Suggestion — suggest_places","title":"Search Suggestion — suggest_places","text":"function returns candidate locations based partial search query. designed used interactive search experience client facing application.","code":""},{"path":"/reference/suggest_places.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Suggestion — suggest_places","text":"","code":"suggest_places(   text,   location = NULL,   category = NULL,   search_extent = NULL,   max_suggestions = NULL,   country_code = NULL,   preferred_label_values = NULL,   geocoder = default_geocoder(),   token = arc_token() )"},{"path":"/reference/suggest_places.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Suggestion — suggest_places","text":"text scalar character search key generate place suggestion. location sfc_POINT object centers search. Optional. category scalar character. Place address type can used filter suggest results. Optional. search_extent object class bbox limits search area. especially useful applications user search places addresses within current map extent. Optional. max_suggestions default NULL. maximum number suggestions return. service default 5 maximum 15. country_code default NULL. ISO 3166 country code. See iso_3166_codes() valid ISO codes. Optional. preferred_label_values default NULL. Must one \"postalCity\" \"localCity\". Optional. geocoder default default_geocoder(). token object class httr2_token generated auth_code() related function","code":""},{"path":"/reference/suggest_places.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search Suggestion — suggest_places","text":"data.frame 3 columns: text, magic_key, is_collection.","code":""},{"path":"/reference/suggest_places.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search Suggestion — suggest_places","text":"Unlike functions package, suggest_places() vectorized intended provide search suggestions individual queries made search bar. Utilizes /suggest endpoint.","code":""},{"path":"/reference/suggest_places.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search Suggestion — suggest_places","text":"","code":"# identify a search point location <- sf::st_sfc(sf::st_point(c(-84.34, 33.74)), crs = 4326)  # create a search extent from it search_extent <- sf::st_bbox(sf::st_buffer(location, 10))  # find suggestions from it suggestions <- suggest_places(   \"bellwood\",   location,   search_extent = search_extent )  # get address candidate information # using the text and the magic key find_address_candidates(   suggestions$text,   magic_key = suggestions$magic_key ) #> Simple feature collection with 5 features and 61 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -84.34272 ymin: 33.74034 xmax: -84.34272 ymax: 33.74034 #> Geodetic CRS:  WGS 84 #>   input_id result_id loc_name status score                 match_addr #> 1        1        NA     <NA>      M   100            Bellwood Coffee #> 2        2        NA     <NA>      M   100             Bellwood Homes #> 3        3        NA     <NA>      M   100 Bellwood, Atlanta, Georgia #> 4        4        NA     <NA>      M   100            Bellwood Coffee #> 5        5        NA     <NA>      M   100            Bellwood Church #>                                                       long_label #> 1 Bellwood Coffee, 1366 Glenwood Ave SE, Atlanta, GA, 30316, USA #> 2   Bellwood Homes, 736 Jefferson St NW, Atlanta, GA, 30318, USA #> 3                                     Bellwood, Atlanta, GA, USA #> 4 Bellwood Coffee, 1776 Peachtree St NW, Atlanta, GA, 30309, USA #> 5                              Bellwood Church, Atlanta, GA, USA #>       short_label addr_type              type_field      place_name #> 1 Bellwood Coffee       POI                  Snacks Bellwood Coffee #> 2  Bellwood Homes       POI Other Shops and Service  Bellwood Homes #> 3        Bellwood  Locality                    City        Bellwood #> 4 Bellwood Coffee       POI                  Snacks Bellwood Coffee #> 5 Bellwood Church       POI                  Church Bellwood Church #>                                      place_addr          phone  url rank #> 1 1366 Glenwood Ave SE, Atlanta, Georgia, 30316           <NA> <NA>   19 #> 2  736 Jefferson St NW, Atlanta, Georgia, 30318 (404) 977-5801 <NA>   19 #> 3                              Atlanta, Georgia           <NA> <NA>   20 #> 4 1776 Peachtree St NW, Atlanta, Georgia, 30309           <NA> <NA>   19 #> 5                              Atlanta, Georgia           <NA> <NA>   24 #>   add_bldg add_num add_num_from add_num_to add_range side st_pre_dir #> 1     <NA>    1366         <NA>       <NA>      <NA> <NA>       <NA> #> 2     <NA>     736         <NA>       <NA>      <NA> <NA>       <NA> #> 3     <NA>    <NA>         <NA>       <NA>      <NA> <NA>       <NA> #> 4     <NA>    1776         <NA>       <NA>      <NA> <NA>       <NA> #> 5     <NA>    <NA>         <NA>       <NA>      <NA> <NA>       <NA> #>   st_pre_type   st_name st_type st_dir bldg_type bldg_name level_type #> 1        <NA>  Glenwood     Ave     SE      <NA>      <NA>       <NA> #> 2        <NA> Jefferson      St     NW      <NA>      <NA>       <NA> #> 3        <NA>      <NA>    <NA>   <NA>      <NA>      <NA>       <NA> #> 4        <NA> Peachtree      St     NW      <NA>      <NA>       <NA> #> 5        <NA>      <NA>    <NA>   <NA>      <NA>      <NA>       <NA> #>   level_name unit_type unit_name sub_addr              st_addr block sector #> 1       <NA>      <NA>      <NA>     <NA> 1366 Glenwood Ave SE  <NA>   <NA> #> 2       <NA>      <NA>      <NA>     <NA>  736 Jefferson St NW  <NA>   <NA> #> 3       <NA>      <NA>      <NA>     <NA>                 <NA>  <NA>   <NA> #> 4       <NA>      <NA>      <NA>     <NA> 1776 Peachtree St NW  <NA>   <NA> #> 5       <NA>      <NA>      <NA>     <NA>                 <NA>  <NA>   <NA> #>   nbrhd district    city metro_area     subregion  region region_abbr territory #> 1  <NA>     <NA> Atlanta       <NA> DeKalb County Georgia          GA      <NA> #> 2  <NA>     <NA> Atlanta       <NA> Fulton County Georgia          GA      <NA> #> 3  <NA> Bellwood Atlanta       <NA> Fulton County Georgia          GA      <NA> #> 4  <NA>     <NA> Atlanta       <NA> Fulton County Georgia          GA      <NA> #> 5  <NA>     <NA> Atlanta       <NA> Fulton County Georgia          GA      <NA> #>   zone postal postal_ext country    cntry_name lang_code distance         x #> 1 <NA>  30316       <NA>     USA United States       ENG        0 -84.34272 #> 2 <NA>  30318       <NA>     USA United States       ENG        0 -84.41127 #> 3 <NA>   <NA>       <NA>     USA United States       ENG        0 -84.41243 #> 4 <NA>  30309       <NA>     USA United States       ENG        0 -84.39418 #> 5 <NA>   <NA>       <NA>     USA United States       ENG        0 -84.41521 #>          y display_x display_y      xmin      xmax     ymin     ymax ex_info #> 1 33.74034 -84.34272  33.74034 -84.34372 -84.34172 33.73935 33.74135    <NA> #> 2 33.77591 -84.41127  33.77591 -84.41227 -84.41027 33.77491 33.77691    <NA> #> 3 33.77455 -84.41243  33.77455 -84.42343 -84.40143 33.76355 33.78555    <NA> #> 4 33.80282 -84.39418  33.80282 -84.39518 -84.39318 33.80182 33.80382    <NA> #> 5 33.77288 -84.41521  33.77288 -84.42021 -84.41021 33.76788 33.77788    <NA> #>                                    extents                   geometry #> 1 -84.34372, 33.73935, -84.34172, 33.74135 POINT (-84.34272 33.74034) #> 2 -84.41227, 33.77491, -84.41027, 33.77691 POINT (-84.41127 33.77591) #> 3 -84.42343, 33.76355, -84.40143, 33.78555 POINT (-84.41243 33.77455) #> 4 -84.39518, 33.80182, -84.39318, 33.80382 POINT (-84.39418 33.80282) #> 5 -84.42021, 33.76788, -84.41021, 33.77788 POINT (-84.41521 33.77288)"},{"path":"/reference/world_geocoder.html","id":null,"dir":"Reference","previous_headings":"","what":"ArcGIS World Geocoder — world_geocoder","title":"ArcGIS World Geocoder — world_geocoder","text":"ArcGIS World Geocoder made publicly available uses. world_geocoder object used default GeocodeServer object default_geocoder() authorization token found. find_address_candidates(), reverse_geocode(), suggest_places() can used without authorization token. geocode_addresses() funciton requires authorization token used batch geocoding.","code":""},{"path":"/reference/world_geocoder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ArcGIS World Geocoder — world_geocoder","text":"","code":"world_geocoder"},{"path":"/reference/world_geocoder.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ArcGIS World Geocoder — world_geocoder","text":"object class GeocodeServer (inherits list) length 12.","code":""},{"path":"/reference/world_geocoder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ArcGIS World Geocoder — world_geocoder","text":"object class GeocodeServer","code":""},{"path":"/news/index.html","id":"arcgisgeocode-022","dir":"Changelog","previous_headings":"","what":"arcgisgeocode 0.2.2","title":"arcgisgeocode 0.2.2","text":"CRAN release: 2024-09-27 Bumps version extendr-api address CRAN checks Bumps version httr2 due regression #34 Bug fixes unexported objects NA handling [@elipousson] #37","code":""},{"path":"/news/index.html","id":"arcgisgeocode-021","dir":"Changelog","previous_headings":"","what":"arcgisgeocode 0.2.1","title":"arcgisgeocode 0.2.1","text":"CRAN release: 2024-08-02 Address CRAN error MacOS oldrel","code":""},{"path":"/news/index.html","id":"arcgisgeocode-020","dir":"Changelog","previous_headings":"","what":"arcgisgeocode 0.2.0","title":"arcgisgeocode 0.2.0","text":"CRAN release: 2024-07-03 minimum version R supported R 4.2 #22 Fixed bug default_geocoder() work without attaching entire package. See https://github.com/R-ArcGIS/arcgisgeocode/issues/23. #21 Fixed bug custom locators parse sort results appropriately.","code":""},{"path":"/news/index.html","id":"arcgisgeocode-010","dir":"Changelog","previous_headings":"","what":"arcgisgeocode 0.1.0","title":"arcgisgeocode 0.1.0","text":"CRAN release: 2024-05-25 Initial CRAN release","code":""}]
